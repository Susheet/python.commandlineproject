import sqlite3 as lite

# functionality goes here

# con short for connection; since connection is not always sure,in case of failure we insert this code inside try catch;
# lite has a method for connection;
# since we haven't mentioned any path, database created inside same folder
# with is a statement of sql to create a database of such name if it doesn't exist;
# cur is used to connect to database and talk to it, all sql commands can be written in cur.execute("")


class DatabaseManage(object):

    def __init__(self):
        global con
        try:
            con = lite.connect('courses.db')
            with con:
                cur = con.cursor()
                print("database is created successfully")
                cur.execute("CREATE TABLE IF NOT EXISTS course(Id INTEGER PRIMARY KEY AUTOINCREMENT, \
                             name TEXT, \
                             description TEXT, \
                             price TEXT, \
                             is_private BOOLEAN NOT NULL DEFAULT 1);")
        except Exception:
            print("Unable to create a DB !")

# try to write your code in try catch it is a better practice
    # TODO: create data
    def insert_data(self, data):
        try:
            with con:
                cur = con.cursor()
                cur.execute("INSERT INTO course(name, description, price, is_private) VALUES (?,?,?,?);", data)
                return True
        except Exception:
            return False

    # TODO: read data
    def fetch_data(self):
        try:
            with con:
                cur = con.cursor()
                cur.execute("SELECT * FROM course")
                return cur.fetchall()                  # to throw this data using the inbuilt function fetchall
        except Exception:
            return False

    # TODO: delete data
    def delete_data(self, id):
        try:
            with con:
                cur = con.cursor()
                sql = "DELETE FROM course WHERE id = ?"
                cur.execute(sql, [id])
                return True
        except Exception:
            return False

# TODO:provide interface to user
# giving a starting point for program to start
def main():
    print("*"*40)
    print("\n:: COURSE MANAGEMENT :: \n")
    print("*"*40)

    db = DatabaseManage()

    print("#"*40)
    print("\n::User Manual::\n")
    print("#"*40)

    print("1. Insert a new course\n")
    print("2. show all course\n")
    print("3. delete course(NEED ID ofcourse)\n")
    print("#"*40)

    choice = input("\n Enter a choice: ")

    if choice == "1":
        name = input("\n Enter course name: ")
        description = input("\n Enter course description: ")
        price = input("\n Enter course price: ")
        private = input("\n Is this course private(0/1): ")

        if db.insert_data([name, description, price, private]):
            print("\n Course was inserted successfully ")
        else:
            print("\n Oops! something's wrong")

    elif choice == "2":
        print("\n:: Course list :: ")

        for index, item in enumerate(db.fetch_data()):
            print("\n Sl no :" + str(index + 1))
            print("\n CourseId :" + str(item[0]))
            print("\n CourseName :" + str(item[1]))
            print("\n CourseDescription :" + str(item[2]))
            print("\n CoursePrice :" + str(item[3]))
            private = 'YES' if item[4] else 'No'
            print("\n is Private :" + private)
            print("\n")

    elif choice == "3":
        record_id = input("\nEnter the course Id: ")
        if db.delete_data(record_id):
            print("\nCourse deleted successfully ")
        else:
            print("\n OOPS something wrong")
    else:
        print("\n BAD CHOICE!")


if __name__ == '__main__':
    main()
